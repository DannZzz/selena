import ms from "ms";
import { PunishmentActionsSlots } from "../../docs/CommandSettings";
import { Durations } from "../../docs/SlashOptions";
import { PunishmentAction } from "../../structures/CustomEventTypes";
import { ObjectType } from "../../structures/MainTypes";
import { SlashBuilder, SlashCommand, toChoices } from "../../structures/SlashCommand";

export default new SlashCommand ({
    id: "warn-actions",
    category: "Moderation",
    data: new SlashBuilder("ManageGuild")
        .setName("warn-actions")
        .setDescription("–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–ª—É—á–∏–π")
        .addSubcommand(s => s
            .setName("add")
            .setDescription("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            .addIntegerOption(o => o
                .setName("amount")
                .setDescription("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                .setRequired(true))
            .addStringOption(o => o
                .setName("action")
                .setDescription("–î–µ–π—Å—Ç–≤–∏–µ")
                .setRequired(true)
                .setChoices(...toChoices([
                    ["–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å (mute)", "mute"],
                    ["–í—ã–≥–Ω–∞—Ç—å", "kick"],
                    ["–ó–∞–±–∞–Ω–∏—Ç—å", "ban"]
                ])))
            .addStringOption(o => o
                .setName("duration")
                .setDescription("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (mute)")
                .setChoices(...toChoices(Durations))))
        .addSubcommand(s => s
            .setName("remove")
            .setDescription("–£–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
            .addIntegerOption(o => o
                .setName("index")
                .setDescription("–ù–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏–µ")
                .setRequired(true)))
        .addSubcommand(s => s
            .setName("list")
            .setDescription("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"))            
    ,
    cooldown: 3,
    permissions: "ManageGuild",
    async execute ({interaction, thisGuild, F, options, isGuildPremium, Builder, Database, client }) {
        const cmd = options.getSubcommand();
        const amount = options.getInteger("amount");
        const action = options.getString("action") as PunishmentAction['type'];
        const muteDuration = options.getString("duration");
        const index = options.getInteger("index");
        
        const maxLimit = isGuildPremium ? PunishmentActionsSlots.premium : PunishmentActionsSlots.basic;
        const actions: PunishmentAction[] = [];
        (thisGuild.punishmentActions || []).forEach((pa) => {
            if (actions.every(li => li.amount !== pa.amount) && actions.length < maxLimit) actions.push(pa);
        });
        
        if (cmd === "add") {
            if (actions.length === maxLimit) return Builder.createEmbed().setError(`–ë–æ–ª—å—à–µ –Ω–µ—Ç –º–µ—Å—Ç–∞.${isGuildPremium ? "" : `\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ **–ü—Ä–µ–º–∏—É–º**, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –º–µ—Å—Ç–∞ –¥–æ ${PunishmentActionsSlots.premium}.`}`).setUser(interaction.user).interactionReply(interaction);
            if (amount < 1) return Builder.createEmbed().setError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—á–∞–π - 1.").setUser(interaction.user).interactionReply(interaction);
            if (actions.some(ap => ap.amount === amount)) return Builder.createEmbed().setError("–£–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç–æ–ª—å–∫–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª—É—á–∞–∏.").setUser(interaction.user).interactionReply(interaction);
            if (action === "mute" && !muteDuration) return Builder.createEmbed().setError("–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—é **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ**, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.").setUser(interaction.user).interactionReply(interaction);
            await Database.get("Guild").updateOne({_id: interaction.guildId}, {$push: {punishmentActions: {amount, type: action, muteDuration} as PunishmentAction }});

            Builder.createEmbed().setUser(interaction.user).setSuccess(`–ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.`).interactionReply(interaction);
        } else if (cmd === "list") {
            await interaction.deferReply();
            const toRu: ObjectType<PunishmentAction['type'], string> = {
                ban: "–ó–∞–±–∞–Ω–∏—Ç—å",
                kick: "–í—ã–≥–Ω–∞—Ç—å",
                mute: "–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å"
            }
            
            const mainBuilder = Builder.createEmbed().setTitle("üö´ –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–ª—É—á–∞–∏").setUser(interaction.user).setColor();
            if (actions.length !== 0) {
                actions.forEach((pa, i) => mainBuilder.addField(`\`#${i+1}\` –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${pa.amount}`, `–î–µ–π—Å—Ç–≤–∏–µ: ${toRu[pa.type]}${pa.type === "mute" ? `\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Durations.find(arr => arr[1] === pa.muteDuration)[0]}` : ""}`, false));
            } else {
                mainBuilder.setText("–ü—É—Å—Ç–æ..")
            }
            mainBuilder.editReply(interaction);
        } else if (cmd === "remove") {
            if (!actions[index-1]) return Builder.createEmbed().setUser(interaction.user).setError("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.").interactionReply(interaction);
            const removed = client.util.remove(actions, {indexes: [index-1], elements: []});
            await Database.get("Guild").updateOne({_id: interaction.guildId}, {$set: {punishmentActions: removed }});
            Builder.createEmbed().setUser(interaction.user).setSuccess(`–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ —É–±—Ä–∞–Ω–æ.`).interactionReply(interaction);
        }

        
    }
})