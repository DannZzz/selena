import { stripIndents } from "common-tags";
import { Formatters, Message } from "discord.js";
import ms from "ms";
import { GiveawayEmoji } from "../../docs/CommandSettings";
import { Durations } from "../../docs/SlashOptions";
import { randomWinners } from "../../handlers/GiveawayHandler";
import { SlashBuilder, SlashCommand, toChoices } from "../../structures/SlashCommand";

export default new SlashCommand ({
    id: "giveaway",
    category: "Settings",
    data: new SlashBuilder("ManageGuild")
        .setName("giveaway")
        .setDescription("–†–æ–∑—ã–≥—Ä—ã—à–∏")
        .addSubcommand(s => s
            .setName("create")
            .setDescription("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à")
            .addStringOption(o => o
                .setName("duration")
                .setDescription("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                .addChoices(...toChoices(Durations))
                .setRequired(true))
            .addIntegerOption(o => o
                .setRequired(true)
                .setName("winners")
                .setDescription("–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏"))
            .addStringOption(o => o
                .setName("reward")
                .setDescription("–ü—Ä–∏–∑ (–¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤)")))
        .addSubcommand(s => s
            .setName("end")
            .setDescription("–ó–∞–∫–æ–Ω—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à")
            .addStringOption(o => o
                .setName("id")
                .setDescription("ID —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
                .setRequired(true)))
        .addSubcommand(s => s
            .setName("reroll")
            .setDescription("–í—ã–±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
            .addStringOption(o => o
                .setName("id")
                .setDescription("ID —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
                .setRequired(true)))
    ,
    permissions: "ManageGuild",
    botPermissions: ["EmbedLinks", "AddReactions"],
    async execute ({interaction, options, Builder, Database, client}) {
        const cmd = options.getSubcommand();
        if (cmd === "create") {
            await interaction.deferReply({ephemeral: true});
    
            const duration = options.getString("duration");
            const winners = options.getInteger("winners");
            const reward = options.getString("reward") ? client.util.shorten(options.getString("reward"), 256) : null;
            const endsAt = new Date(Date.now() + ms(duration));
            if (winners <= 0) return Builder.createEmbed().setUser(interaction.user).setError("–ú–∏–Ω–∏–º–∞–Ω–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π - 1.").interactionReply(interaction);
            const builder = Builder.createEmbed().setThumbnail(client.user.avatarURL()).setTitle(`–û—Ç ${interaction.guild.name}`).setText(stripIndents`
                ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners}
                ‚Ä¢ –ê–≤—Ç–æ—Ä: <@${interaction.user.id}>
                ‚Ä¢ –ó–∞–∫–æ–Ω—á–∏—Ç—Å—è: ${Formatters.time(endsAt)} (${Formatters.time(endsAt, "R")})
                ${reward ? `‚Ä¢ –ü—Ä–∏–∑: ${reward}\n` : ""}
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ${GiveawayEmoji} —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.
            `)
    
            await builder.sendToChannel(interaction.channel, {content: `**${GiveawayEmoji}–†–û–ó–´–ì–†–´–®${GiveawayEmoji}**`}).then(async (msg) => {
                if (!msg) {
                    interaction.editReply("–Ø –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–∏ –ø—Ä–∞–≤–∞.")
                } else {
                    await msg.react(GiveawayEmoji);
                    await Database.get("Giveaway").createOne({_id: msg.id, guildId: interaction.guildId, channelId: interaction.channelId, authorId: interaction.user.id, endsAt, winners, reward});
                    interaction.editReply("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                }
            })
        } else if (cmd === "end") {
            const id = options.getString("id");
            let targetMessage: Message = null;
            try {
                targetMessage = await interaction.channel.messages.fetch(id);
            } catch {};
            if (!targetMessage) return Builder.createEmbed().setUser(interaction.user).setError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!").interactionReply(interaction, {ephemeral: true});
            const g = await Database.get("Giveaway").findOneFilter({_id: targetMessage.id, channelId: interaction.channelId, guildId: interaction.guildId});
            if (!g) return Builder.createEmbed().setUser(interaction.user).setError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!").interactionReply(interaction, {ephemeral: true});
            const users = (await targetMessage.reactions.cache.get(GiveawayEmoji as any).users.fetch()).filter(p => !p.bot)
            const message = targetMessage;
            if (users.size === 0) {
                const emb = Builder.createEmbed().setTitle(`–°—Ç–∞—Ç—É—Å: –ó–∞–∫–æ–Ω—á–µ–Ω`).setThumbnail(client.user.avatarURL()).setText(stripIndents`
                ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: –ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
                ‚Ä¢ –ê–≤—Ç–æ—Ä: <@${g.authorId}>
                ${g.reward ? `‚Ä¢ –ü—Ä–∏–∑: ${g.reward}` : ""}
                `).toEmbedBuilder();
                message.edit({embeds: [emb]});
                message.reply(`–ù–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.`)
            } else if (users.size <= g.winners) {
                const emb = Builder.createEmbed().setTitle(`–°—Ç–∞—Ç—É—Å: –ó–∞–∫–æ–Ω—á–µ–Ω`).setThumbnail(client.user.avatarURL()).setText(stripIndents`
                ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${users.map(user => `<@${user.id}>`).join("\n")}
                ‚Ä¢ –ê–≤—Ç–æ—Ä: <@${g.authorId}>
                ${g.reward ? `‚Ä¢ –ü—Ä–∏–∑: ${g.reward}` : ""}
                `).toEmbedBuilder();
                message.edit({embeds: [emb]});
                message.reply({content: `üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${users.map(user => `<@${user.id}>`).join("\n")}`});
            } else {
                let winners = randomWinners(g.winners, users);
                const emb = Builder.createEmbed().setTitle(`–°—Ç–∞—Ç—É—Å: –ó–∞–∫–æ–Ω—á–µ–Ω`).setThumbnail(client.user.avatarURL()).setText(stripIndents`
                ‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners.map(user => `<@${user.id}>`).join("\n")}
                ‚Ä¢ –ê–≤—Ç–æ—Ä: <@${g.authorId}>
                ${g.reward ? `‚Ä¢ –ü—Ä–∏–∑: ${g.reward}` : ""}
                `).toEmbedBuilder();
                message.edit({embeds: [emb]});
                message.reply({content: `üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winners.map(user => `<@${user.id}>`).join("\n")}`});
            }
            await Database.get("Giveaway").deleteOne({_id: g._id, channelId: g.channelId, guildId: g.guildId});
            interaction.reply({content: "–£—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω.", ephemeral: true})
        } else if (cmd === "reroll") {
            const id = options.getString("id");
            let targetMessage: Message = null;
            try {
                targetMessage = await interaction.channel.messages.fetch(id);
            } catch {};
            if (!targetMessage) return Builder.createEmbed().setUser(interaction.user).setError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!").interactionReply(interaction, {ephemeral: true});
            if (await Database.get("Giveaway").findOneFilter({_id: targetMessage.id, channelId: interaction.channelId, guildId: interaction.guildId})) return Builder.createEmbed().setUser(interaction.user).setError("–†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!").interactionReply(interaction, {ephemeral: true});
            const users = await targetMessage.reactions.cache.get(GiveawayEmoji as any).users.fetch();

            if (!users.has(client.user.id)) return Builder.createEmbed().setUser(interaction.user).setError("–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω.").interactionReply(interaction, {ephemeral: true});
            const _users = users.filter(p => !p.bot);

            if (_users.size === 0) return Builder.createEmbed().setUser(interaction.user).setError(`–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–∂–∞–Ω –Ω–∞ ${GiveawayEmoji}.`).interactionReply(interaction, {ephemeral: true});
            const user = _users.random();
            interaction.reply({content: "–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.", ephemeral: true});
            targetMessage.reply(`üéâ –ù–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: ${user}`)
        }
        
    }
})